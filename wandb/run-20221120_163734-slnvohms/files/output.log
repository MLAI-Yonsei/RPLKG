Loading trainer: ZeroshotCLIP
Loading dataset: ImageNet
Loading preprocessed few-shot data from /data/yewon/DATA/imagenet/split_fewshot/shot_16-seed_1.pkl
Building transform_train
+ random resized crop (size=(224, 224), scale=(0.08, 1.0))
+ random flip
+ to torch tensor of range [0, 1]
+ normalization (mean=[0.48145466, 0.4578275, 0.40821073], std=[0.26862954, 0.26130258, 0.27577711])
Building transform_test
+ resize the smaller edge to 224
+ 224x224 center crop
+ to torch tensor of range [0, 1]
+ normalization (mean=[0.48145466, 0.4578275, 0.40821073], std=[0.26862954, 0.26130258, 0.27577711])
---------  --------
Dataset    ImageNet
# classes  1,000
# train_x  16,000
# val      50,000
# test     50,000
---------  --------
/mlainas/KGPrompt_data/imagenet/shot_16_seed_1_train.npy
/mlainas/KGPrompt_data/imagenet/shot_16_seed_1_valid.npy
Loading CLIP (backbone: ViT-B/16)
Loading preprocessed few-shot data from /data/yewon/DATA/imagenet/preprocessed.pkl
> /mlainas/yewon/CoOp/CoOp/KGPrompt/trainers/zsclip.py(120)build_model()
-> self.sched = build_lr_scheduler(self.optim, cfg.OPTIM)
(Pdb) CfgNode({'VERSION': 1, 'OUTPUT_DIR': 'output/zs_gumbel_im_test_1/2022-11-20_16-37/imagenet/shots_16/ZeroshotCLIP/vit_b16/seed', 'RESUME': '', 'SEED': 1, 'MODE': 'attention', 'USE_CUDA': True, 'VERBOSE': True, 'INPUT': CfgNode({'SIZE': (224, 224), 'INTERPOLATION': 'bicubic', 'TRANSFORMS': ('random_resized_crop', 'random_flip', 'normalize'), 'NO_TRANSFORM': False, 'PIXEL_MEAN': [0.48145466, 0.4578275, 0.40821073], 'PIXEL_STD': [0.26862954, 0.26130258, 0.27577711], 'CROP_PADDING': 4, 'RRCROP_SCALE': (0.08, 1.0), 'CUTOUT_N': 1, 'CUTOUT_LEN': 16, 'GN_MEAN': 0.0, 'GN_STD': 0.15, 'RANDAUGMENT_N': 2, 'RANDAUGMENT_M': 10, 'COLORJITTER_B': 0.4, 'COLORJITTER_C': 0.4, 'COLORJITTER_S': 0.4, 'COLORJITTER_H': 0.1, 'RGS_P': 0.2, 'GB_P': 0.5, 'GB_K': 21}), 'DATASET': CfgNode({'ROOT': '/data/yewon/DATA', 'NAME': 'ImageNet', 'SOURCE_DOMAINS': (), 'TARGET_DOMAINS': (), 'NUM_LABELED': -1, 'NUM_SHOTS': 16, 'VAL_PERCENT': 0.1, 'STL10_FOLD': -1, 'CIFAR_C_TYPE': '', 'CIFAR_C_LEVEL': 1, 'ALL_AS_UNLABELED': False, 'SUBSAMPLE_CLASSES': 'all'}), 'EMBEDDING_ROOT': '/disk/teang1995/emb_root', 'DATALOADER': CfgNode({'NUM_WORKERS': 8, 'K_TRANSFORMS': 1, 'RETURN_IMG0': False, 'TRAIN_X': CfgNode({'SAMPLER': 'RandomSampler', 'BATCH_SIZE': 32, 'N_DOMAIN': 0, 'N_INS': 16}), 'TRAIN_U': CfgNode({'SAME_AS_X': True, 'SAMPLER': 'RandomSampler', 'BATCH_SIZE': 32, 'N_DOMAIN': 0, 'N_INS': 16}), 'TEST': CfgNode({'SAMPLER': 'SequentialSampler', 'BATCH_SIZE': 100})}), 'MODEL': CfgNode({'INIT_WEIGHTS': '', 'BACKBONE': CfgNode({'NAME': 'ViT-B/16', 'PRETRAINED': True}), 'HEAD': CfgNode({'NAME': '', 'HIDDEN_LAYERS': (), 'ACTIVATION': 'relu', 'BN': True, 'DROPOUT': 0.0})}), 'OPTIM': CfgNode({'NAME': 'sgd', 'LR': 0.01, 'WEIGHT_DECAY': 0.0, 'MOMENTUM': 0.9, 'SGD_DAMPNING': 0, 'SGD_NESTEROV': False, 'RMSPROP_ALPHA': 0.99, 'ADAM_BETA1': 0.9, 'ADAM_BETA2': 0.999, 'STAGED_LR': False, 'NEW_LAYERS': (), 'BASE_LR_MULT': 0.1, 'LR_SCHEDULER': 'cosine', 'STEPSIZE': (-1,), 'GAMMA': 0.1, 'MAX_EPOCH': 100, 'WARMUP_EPOCH': 1, 'WARMUP_TYPE': 'constant', 'WARMUP_CONS_LR': 1e-05, 'WARMUP_MIN_LR': 1e-05, 'WARMUP_RECOUNT': True}), 'TRAIN': CfgNode({'CHECKPOINT_FREQ': 0, 'PRINT_FREQ': 5, 'COUNT_ITER': 'train_x'}), 'TEST': CfgNode({'EVALUATOR': 'Classification', 'PER_CLASS_RESULT': True, 'COMPUTE_CMAT': False, 'NO_TEST': False, 'SPLIT': 'test', 'FINAL_MODEL': 'last_step'}), 'TRAINER': CfgNode({'NAME': 'ZeroshotCLIP', 'MCD': CfgNode({'N_STEP_F': 4}), 'MME': CfgNode({'LMDA': 0.1}), 'CDAC': CfgNode({'CLASS_LR_MULTI': 10, 'RAMPUP_COEF': 30, 'RAMPUP_ITRS': 1000, 'TOPK_MATCH': 5, 'P_THRESH': 0.95, 'STRONG_TRANSFORMS': ()}), 'SE': CfgNode({'EMA_ALPHA': 0.999, 'CONF_THRE': 0.95, 'RAMPUP': 300}), 'M3SDA': CfgNode({'LMDA': 0.5, 'N_STEP_F': 4}), 'DAEL': CfgNode({'WEIGHT_U': 0.5, 'CONF_THRE': 0.95, 'STRONG_TRANSFORMS': ()}), 'CROSSGRAD': CfgNode({'EPS_F': 1.0, 'EPS_D': 1.0, 'ALPHA_F': 0.5, 'ALPHA_D': 0.5}), 'DDAIG': CfgNode({'G_ARCH': '', 'LMDA': 0.3, 'CLAMP': False, 'CLAMP_MIN': -1.0, 'CLAMP_MAX': 1.0, 'WARMUP': 0, 'ALPHA': 0.5}), 'DAELDG': CfgNode({'WEIGHT_U': 0.5, 'CONF_THRE': 0.95, 'STRONG_TRANSFORMS': ()}), 'DOMAINMIX': CfgNode({'TYPE': 'crossdomain', 'ALPHA': 1.0, 'BETA': 1.0}), 'ENTMIN': CfgNode({'LMDA': 0.001}), 'MEANTEACHER': CfgNode({'WEIGHT_U': 1.0, 'EMA_ALPHA': 0.999, 'RAMPUP': 5}), 'MIXMATCH': CfgNode({'WEIGHT_U': 100.0, 'TEMP': 2.0, 'MIXUP_BETA': 0.75, 'RAMPUP': 20000}), 'FIXMATCH': CfgNode({'WEIGHT_U': 1.0, 'CONF_THRE': 0.95, 'STRONG_TRANSFORMS': ()}), 'COOP': CfgNode({'N_CTX': 16, 'CSC': False, 'CTX_INIT': 'a photo of a {}.', 'PREC': 'fp16', 'CLASS_TOKEN_POSITION': 'end'}), 'COCOOP': CfgNode({'N_CTX': 16, 'CTX_INIT': '', 'PREC': 'fp16'}), 'MY_MODEL': CfgNode({'DROPOUT': 0.1, 'WEIGHT_DECAY': 0.0, 'TAU': 1.0})})})
(Pdb) CfgNode({'NAME': 'sgd', 'LR': 0.01, 'WEIGHT_DECAY': 0.0, 'MOMENTUM': 0.9, 'SGD_DAMPNING': 0, 'SGD_NESTEROV': False, 'RMSPROP_ALPHA': 0.99, 'ADAM_BETA1': 0.9, 'ADAM_BETA2': 0.999, 'STAGED_LR': False, 'NEW_LAYERS': (), 'BASE_LR_MULT': 0.1, 'LR_SCHEDULER': 'cosine', 'STEPSIZE': (-1,), 'GAMMA': 0.1, 'MAX_EPOCH': 100, 'WARMUP_EPOCH': 1, 'WARMUP_TYPE': 'constant', 'WARMUP_CONS_LR': 1e-05, 'WARMUP_MIN_LR': 1e-05, 'WARMUP_RECOUNT': True})
(Pdb)
Traceback (most recent call last):
  File "train.py", line 257, in <module>
    main(args)
  File "train.py", line 178, in main
    trainer = build_trainer(cfg)
  File "/mlainas/yewon/CoOp/CoOp/KGPrompt/dassl/engine/build.py", line 11, in build_trainer
    return TRAINER_REGISTRY.get(cfg.TRAINER.NAME)(cfg)
  File "/mlainas/yewon/CoOp/CoOp/KGPrompt/dassl/engine/trainer.py", line 345, in __init__
    self.build_model(self.df)
  File "/mlainas/yewon/CoOp/CoOp/KGPrompt/trainers/zsclip.py", line 120, in build_model
    self.sched = build_lr_scheduler(self.optim, cfg.OPTIM)
  File "/mlainas/yewon/CoOp/CoOp/KGPrompt/trainers/zsclip.py", line 120, in build_model
    self.sched = build_lr_scheduler(self.optim, cfg.OPTIM)
  File "/mlainas/anaconda3/envs/torch/lib/python3.8/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/mlainas/anaconda3/envs/torch/lib/python3.8/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit